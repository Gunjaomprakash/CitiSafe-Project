import { Colors } from '@/constants/Colors';
import { Ionicons } from '@expo/vector-icons';
import { useFocusEffect } from 'expo-router';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import {
  Animated,
  Dimensions,
  Easing,
  FlatList,
  Keyboard,
  KeyboardAvoidingView,
  ListRenderItemInfo,
  Platform,
  SafeAreaView,
  StyleSheet,
  Text,
  TextInput,
  TextStyle,
  TouchableOpacity,
  TouchableWithoutFeedback,
  View,
  ViewStyle,
  useColorScheme
} from 'react-native';

interface Message {
  id: string;
  text: string;
  sender: 'me' | 'other';
  timestamp?: number; // Optional timestamp as we are not fully managing state here
}

type ColorPalette = typeof Colors['light'] & typeof Colors['dark'] & {
    onPrimary: string;
    chatBubbleMe: string;
    chatBubbleOther: string;
    chatInputBackground: string;
    chatInputBorder: string;
    chatInputText: string;
    chatSendButton: string;
    error: string; // Added error from dark theme
    onSurface: string; // Added onSurface from dark theme
    primary: string; // Ensure primary is included
    accent: string; // Ensure accent is included
    surface: string; // Ensure surface is included
    textPrimary: string; // Ensure textPrimary is included
    textSecondary: string; // Ensure textSecondary is included
    tint: string; // Ensure tint is included
    icon: string; // Ensure icon is included
    tabIconDefault: string; // Ensure tabIconDefault is included
    tabIconSelected: string; // Ensure tabIconSelected is included
    backgroundDark?: string; // Optional property specific to dark theme
};

// Define dynamic styles as functions outside StyleSheet.create with type annotations
const myMessageStyle = (colors: ColorPalette): ViewStyle => ({
    alignSelf: 'flex-end',
    backgroundColor: colors.chatBubbleMe || '#007AFF',
    marginRight: 5,
    padding: 10,
    borderRadius: 10,
    marginVertical: 5,
    maxWidth: '80%',
});

const otherMessageStyle = (colors: ColorPalette): ViewStyle => ({
    alignSelf: 'flex-start',
    backgroundColor: colors.chatBubbleOther || '#4CD964',
    marginLeft: 5,
    padding: 10,
    borderRadius: 10,
    marginVertical: 5,
    maxWidth: '80%',
});

const myMessageTextStyle = (colors: ColorPalette): TextStyle => ({
    color: colors.onPrimary || '#FFFFFF',
    fontSize: 16,
    fontFamily: Platform.OS === 'ios' ? 'HelveticaNeue' : 'sans-serif-medium',
    fontWeight: 'bold',
});

const otherMessageTextStyle = (colors: ColorPalette): TextStyle => ({
    color: colors.onPrimary || '#FFFFFF',
    fontSize: 16,
    fontFamily: Platform.OS === 'ios' ? 'HelveticaNeue' : 'sans-serif',
    fontWeight: 'normal',
});

const inputContainerStyle = (colors: ColorPalette): ViewStyle => ({
    flexDirection: 'row',
    paddingHorizontal: 14,
    paddingVertical: 7,
    backgroundColor: 'rgba(20, 20, 20, 0.9)', // Darker background for better visibility
    borderRadius: 22, // Slightly less rounded corners
    marginHorizontal: 16,
    marginBottom: 90, // Increased margin to account for raised dock
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 3,
    elevation: 3, // Reduced elevation for simpler look
    borderWidth: 0.5, // Thinner border
    borderColor: '#FFFFFF55', // Semi-transparent white border
});

const inputStyle = (colors: ColorPalette): TextStyle => ({
    flex: 1,
    backgroundColor: 'transparent', // No additional background - cleaner
    color: '#FFFFFF', // White text
    borderRadius: 20,
    paddingHorizontal: 14,
    paddingVertical: 10,
    marginRight: 10,
    fontSize: 16,
    fontFamily: Platform.OS === 'ios' ? 'HelveticaNeue' : 'sans-serif',
    maxHeight: 100, // Slightly reduced max height
});

const sendButtonStyle = (colors: ColorPalette): ViewStyle => ({
    backgroundColor: '#FFFFFF', // White button
    borderRadius: 18, // Less rounded for cleaner look
    width: 36,
    height: 36,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.15,
    shadowRadius: 1,
    elevation: 2, // Minimal elevation
});

// Define types for scrolling text
interface Word {
  id: string;
  text: string;
}

interface TextRow {
  id: string;
  direction: 'rtl' | 'ltr';
  speed: number;
  words: Word[];
  color: string;
}

// Scrolling text data for the home page - all white and right-to-left
const scrollingTextRows: TextRow[] = [
  {
    id: 'row1',
    direction: 'rtl', // Right to left
    speed: 15,
    color: '#FFFFFF', // White color
    words: [
      { id: '1-1', text: 'Safe Routes' },
      { id: '1-2', text: 'Navigation' },
      { id: '1-3', text: 'Crime Data' },
      { id: '1-4', text: 'Street Safety' },
      { id: '1-5', text: 'Secure Areas' },
      { id: '1-6', text: 'Hotspot Map' },
      { id: '1-7', text: 'Route Planning' },
    ]
  },
  {
    id: 'row2',
    direction: 'rtl', // Right to left
    speed: 20,
    color: '#FFFFFF', // White color
    words: [
      { id: '2-1', text: 'Safety Tips' },
      { id: '2-2', text: 'Alerts' },
      { id: '2-3', text: 'Warnings' },
      { id: '2-4', text: 'Prevention' },
      { id: '2-5', text: 'Stay Alert' },
      { id: '2-6', text: 'Local Updates' },
      { id: '2-7', text: 'Be Aware' },
    ]
  },
  {
    id: 'row3',
    direction: 'rtl', // Right to left
    speed: 10,
    color: '#FFFFFF', // White color
    words: [
      { id: '3-1', text: 'Time Analysis' },
      { id: '3-2', text: 'Historical Data' },
      { id: '3-3', text: 'Crime Trends' },
      { id: '3-4', text: 'Statistics' },
      { id: '3-5', text: 'Monthly Reports' },
      { id: '3-6', text: 'Pattern Detection' },
      { id: '3-7', text: 'Risk Assessment' },
    ]
  },
  {
    id: 'row4',
    direction: 'rtl', // Right to left
    speed: 25,
    color: '#FFFFFF', // White color
    words: [
      { id: '4-1', text: 'Stay Protected' },
      { id: '4-2', text: 'Emergency Guide' },
      { id: '4-3', text: 'Quick Actions' },
      { id: '4-4', text: 'Resources' },
      { id: '4-5', text: 'Help Center' },
      { id: '4-6', text: 'Report Crime' },
      { id: '4-7', text: 'Contact Info' },
    ]
  }
];

// Non-interactive Scrolling Text Row Component
const ScrollingTextRow: React.FC<{
  rowData: TextRow;
}> = ({ rowData }) => {
  const scrollX = useRef(new Animated.Value(0)).current;
  const opacity = useRef(new Animated.Value(0)).current;
  const screenWidth = Dimensions.get('window').width;
  const [contentWidth, setContentWidth] = useState(0);
  
  // Animation for scrolling - optimized for smoother performance
  useEffect(() => {
    // First fade in the row with a staggered effect
    Animated.timing(opacity, {
      toValue: 1,
      duration: 400,
      delay: 80 + Math.random() * 150, // Shorter random delay for faster initial load
      easing: Easing.out(Easing.quad),
      useNativeDriver: true
    }).start();
    
    // Then start the scrolling animation with a shorter delay
    setTimeout(() => {
      // We'll use the screen width as our base distance
      // Since we're adding multiple copies of the words, we'll have enough content
      const distance = screenWidth * 2; // Use double screen width for consistent animation
      const duration = (distance / rowData.speed) * 1000;
      
      // Configure animation based on direction - always RTL per requirements
      let initialValue = screenWidth; // Start offscreen to the right
      let toValue = -distance;        // Move to the left
      
      // Reset position
      scrollX.setValue(initialValue);
      
      // Start animation with a smoothly looped sequence using native driver for better performance
      Animated.loop(
        Animated.sequence([
          Animated.timing(scrollX, {
            toValue: toValue,
            duration: duration,
            easing: Easing.linear,
            useNativeDriver: true // Using native driver for better performance
          }),
          Animated.timing(scrollX, {
            toValue: initialValue,
            duration: 0, // Instant reset
            useNativeDriver: true
          })
        ])
      ).start();
    }, 300);
    
    return () => {
      // Cleanup animation on unmount
      scrollX.stopAnimation();
      opacity.stopAnimation();
    };
  }, [contentWidth, rowData.direction, rowData.speed, screenWidth, scrollX, opacity]);

  return (
    <Animated.View style={[styles.scrollingRowContainer, { opacity }]}>
      <Animated.View 
        style={[
          styles.scrollingRow,
          { transform: [{ translateX: scrollX }] }
        ]}
        onLayout={(event) => {
          setContentWidth(event.nativeEvent.layout.width);
        }}
      >
        {/* Duplicate the words at the beginning to avoid empty space */}
        {rowData.words.map((word) => (
          <View
            key={`${word.id}-begin`}
            style={[
              styles.wordBubble,
              { 
                backgroundColor: 'rgba(255, 255, 255, 0.08)', // Very slight white background for subtle depth
                borderColor: rowData.color,
                shadowColor: rowData.color,
                shadowOffset: { width: 0, height: 1 },
                shadowOpacity: 0.3,
                shadowRadius: 2,
                elevation: 2
              }
            ]}
          >
            <Text style={[styles.wordText, { color: rowData.color }]}>{word.text}</Text>
          </View>
        ))}
        
        {/* Main words */}
        {rowData.words.map((word) => (
          <View
            key={word.id}
            style={[
              styles.wordBubble,
              { 
                backgroundColor: 'rgba(255, 255, 255, 0.08)', // Very slight white background for subtle depth
                borderColor: rowData.color,
                shadowColor: rowData.color,
                shadowOffset: { width: 0, height: 1 },
                shadowOpacity: 0.3,
                shadowRadius: 2,
                elevation: 2
              }
            ]}
          >
            <Text style={[styles.wordText, { color: rowData.color }]}>{word.text}</Text>
          </View>
        ))}
        
        {/* Duplicate the words at the end to avoid empty space */}
        {rowData.words.map((word) => (
          <View
            key={`${word.id}-end`}
            style={[
              styles.wordBubble,
              { 
                backgroundColor: 'rgba(255, 255, 255, 0.08)', // Very slight white background for subtle depth
                borderColor: rowData.color,
                shadowColor: rowData.color,
                shadowOffset: { width: 0, height: 1 },
                shadowOpacity: 0.3,
                shadowRadius: 2,
                elevation: 2
              }
            ]}
          >
            <Text style={[styles.wordText, { color: rowData.color }]}>{word.text}</Text>
          </View>
        ))}
      </Animated.View>
    </Animated.View>
  );
};

export default function HomeScreen() {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [isChatting, setIsChatting] = useState(false);
  const [isInputFocused, setIsInputFocused] = useState(false);
  const [showScrollingText, setShowScrollingText] = useState(true);

  const colorScheme = useColorScheme();
  const colors: ColorPalette = Colors[colorScheme ?? 'light'] as ColorPalette;
  
  const flatListRef = useRef<FlatList>(null);
  const initialRenderRef = useRef(true);

  // Reset state when the screen is focused (navigated to)
  useFocusEffect(
    useCallback(() => {
      if (!initialRenderRef.current) {
        // This check ensures we don't reset everything on the first render
        setIsChatting(false);
        setMessage('');
        setMessages([]);
        setShowScrollingText(true);  // Show scrolling text when screen is focused again
        setIsInputFocused(false);    // Ensure input is not focused
        
        // Dismiss keyboard if it's open
        Keyboard.dismiss();
      }
      initialRenderRef.current = false;
    }, [])
  );

  // Auto-generate a response when user sends a message (example only)
  useEffect(() => {
    if (messages.length > 0 && messages[messages.length - 1].sender === 'me') {
      // Simulate a delay before bot responds
      const timer = setTimeout(() => {
        const botResponses = [
          "I understand your concern. Let me help you find safe routes.",
          "Based on current data, this area has low crime incidents.",
          "Would you like me to alert you about safety updates in this area?",
          "The nearest safe zone is about 2 blocks away.",
          "I've analyzed the crime patterns and can suggest a safer route."
        ];
        
        const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];
        
        const botMessage: Message = {
          id: Date.now().toString(),
          text: randomResponse,
          sender: 'other',
        };
        
        setMessages(prev => [...prev, botMessage]);
        
        setTimeout(() => {
          flatListRef.current?.scrollToEnd({ animated: true });
        }, 100);
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [messages]);

  const handleTextInputChange = useCallback((text: string) => {
    setMessage(text);
    // If text is entered AND we are not currently in chat mode,
    // switch to chat mode.
    if (text.length > 0 && !isChatting) {
      setIsChatting(true);
      setShowScrollingText(false);
    }
  }, [isChatting]);

  const sendMessage = useCallback(() => {
    if (message.trim().length > 0) {
      const newMessage: Message = {
        id: Date.now().toString(),
        text: message.trim(),
        sender: 'me',
      };
      setMessages(prevMessages => [...prevMessages, newMessage]);
      setMessage('');
      setIsChatting(true);
      setShowScrollingText(false);
      
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [message]);

  const handleInputFocus = useCallback(() => {
    setIsInputFocused(true);
    setShowScrollingText(false);
  }, []);

  const handleInputBlur = useCallback(() => {
    // Only show scrolling text again if we're not in chat mode and have no messages
    if (!isChatting && message.trim().length === 0 && messages.length === 0) {
      setIsInputFocused(false);
      setShowScrollingText(true);
    }
  }, [isChatting, message, messages.length]);

  const renderMessage = useCallback(({ item }: ListRenderItemInfo<Message>) => (
    <View
      style={[
        styles.messageContainer,
        item.sender === 'me' ? myMessageStyle(colors) : otherMessageStyle(colors),
      ]}
    >
      <Text style={item.sender === 'me' ? myMessageTextStyle(colors) : otherMessageTextStyle(colors)}>
        {item.text}
      </Text>
    </View>
  ), [colors]);

  // The dock height and margin - must match values in _layout.tsx
  const dockHeight = 45;
  const dockBottomMargin = 25;  // This should match bottom value in _layout.tsx
  const dockTotalHeight = dockHeight + dockBottomMargin; // 70

  const dismissKeyboard = () => {
    Keyboard.dismiss();
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <TouchableWithoutFeedback onPress={dismissKeyboard} accessible={false}>
        <View style={styles.flex1}>
          <KeyboardAvoidingView
            style={styles.keyboardAvoidingView}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            keyboardVerticalOffset={Platform.OS === 'ios' ? dockTotalHeight : dockTotalHeight}
          >
            {isChatting ? (
              <FlatList
                ref={flatListRef}
                data={messages}
                renderItem={renderMessage}
                keyExtractor={(item) => item.id}
                style={styles.messageList}
                contentContainerStyle={styles.messageListContent}
                onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
                onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}
              />
            ) : (
              <TouchableWithoutFeedback onPress={dismissKeyboard}>
                <View style={[styles.contentArea, { backgroundColor: colors.background }]}>
                  {/* App Title display at the top */}
                  <Text style={styles.appTitle}>
                    CrimeApp
                  </Text>
                  
                  {/* Scrolling Text Display - only show if enabled */}
                  {showScrollingText && (
                    <View style={styles.scrollingTextContainer}>
                      {scrollingTextRows.map((row) => (
                        <ScrollingTextRow 
                          key={row.id}
                          rowData={row}
                        />
                      ))}
                    </View>
                  )}
                  
                  {/* Brief instruction text at the bottom */}
                  <Text style={styles.instructionText}>
                    Type a message to start
                  </Text>
                </View>
              </TouchableWithoutFeedback>
            )}

            {/* The input container is inside KeyboardAvoidingView and positioned by flex */}
            <View style={[inputContainerStyle(colors), styles.inputContainer]}>
              <TextInput
                style={inputStyle(colors)}
                value={message}
                onChangeText={handleTextInputChange}
                placeholder="Type a message..."
                placeholderTextColor="rgba(255, 255, 255, 0.5)"
                multiline={true}
                selectionColor="#FFFFFF"
                onFocus={handleInputFocus}
                onBlur={handleInputBlur}
              />
              <TouchableOpacity 
                style={[
                  sendButtonStyle(colors),
                  message.trim().length === 0 && { opacity: 0.5 }
                ]} 
                onPress={sendMessage} 
                disabled={message.trim().length === 0}
                activeOpacity={0.7} // Better touch feedback
              >
                <Ionicons 
                  name="paper-plane" 
                  size={18} 
                  color="#333333" // Dark gray icon on white button
                  style={{ marginLeft: 2 }} // Slightly adjust position for visual balance
                />
              </TouchableOpacity>
            </View>
          </KeyboardAvoidingView>
        </View>
      </TouchableWithoutFeedback>
    </SafeAreaView>
  );
}

// Define static styles within StyleSheet.create
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  flex1: {
    flex: 1,
  },
  keyboardAvoidingView: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  messageList: {
    flex: 1,
  },
  messageListContent: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  messageContainer: {
    // Styles handled by dynamic functions
  },
  inputContainer: {
    // Position is relative within KeyboardAvoidingView
  },
  contentArea: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: 'rgba(10, 10, 20, 0.7)', // Darker blue-black background for modern look
  },
  appTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#FFFFFF', // White text
    marginBottom: 20,
    textAlign: 'center',
    letterSpacing: 1,
    fontFamily: Platform.OS === 'ios' ? 'HelveticaNeue' : 'sans-serif-medium'
  },
  instructionText: {
    fontSize: 15,
    color: '#FFFFFF', // White text
    marginTop: 20,
    textAlign: 'center',
    opacity: 0.7, 
    fontFamily: Platform.OS === 'ios' ? 'HelveticaNeue' : 'sans-serif'
  },
  scrollingTextContainer: {
    flex: 1,
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 5, // No vertical padding
    marginVertical: -5, // Negative margin to bring rows closer together
  },
  scrollingRowContainer: {
    overflow: 'hidden',
    width: '100%',
    height: 40, // Even further reduced height for more compact look
    marginVertical: 1, // Minimal vertical spacing between rows
  },
  scrollingRow: {
    flexDirection: 'row',
    height: '100%',
    alignItems: 'center',
  },
  wordBubble: {
    paddingVertical: 5, // Minimized vertical padding
    paddingHorizontal: 8, // Reduced horizontal padding
    borderRadius: 14, // Slightly smaller rounded corners for compact look
    marginHorizontal: 3, // Tighter spacing between bubbles
    borderWidth: 1, // Thinner border for sleeker appearance
    borderColor: '#FFFFFF', // White border
  },
  wordText: {
    color: '#FFFFFF', // White text
    fontSize: 12, // Slightly smaller font size for more compact look
    fontFamily: Platform.OS === 'ios' ? 'HelveticaNeue' : 'sans-serif', // Platform-specific font
    fontWeight: '500', // Slightly lighter weight for better legibility at small size
    letterSpacing: -0.2, // Slightly negative letter spacing for tighter text
  },
});
